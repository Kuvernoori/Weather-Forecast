import os
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)
from datetime import time, datetime

from storage import load_user_cities, save_user_cities

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENWEATHER_TOKEN = os.getenv("OPENWEATHER_TOKEN")

user_cities = load_user_cities()


def get_weather_forecast(city):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code != 200:
        return None

    data = response.json()
    forecast_list = data["list"]
    today = datetime.now().date()

    result = [f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {city.title()}:\n"]
    has_data = False

    for item in forecast_list:
        forecast_time = datetime.fromtimestamp(item["dt"])
        if forecast_time.date() != today:
            continue

        temp = item["main"]["temp"]
        weather_desc = item["weather"][0]["description"]
        pop = item.get("pop", 0) * 100
        clouds = item["clouds"]["all"]
        wind = item["wind"]["speed"]
        time_str = forecast_time.strftime("%H:%M")

        line = f"üïí {time_str} | üå° {temp:.0f}¬∞C | {weather_desc.capitalize()}"
        if pop >= 20:
            line += f" | üåß –û—Å–∞–¥–∫–∏: {pop:.0f}%"
        if clouds >= 70:
            line += f" | ‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%"
        if wind >= 5:
            line += f" | üí® –í–µ—Ç–µ—Ä: {wind:.0f} –º/—Å"

        result.append(line)
        has_data = True

    if not has_data:
        result.append("–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ—â—ë –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")

    return "\n".join(result)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É:\n"
        "/setcity <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø–æ–≥–æ–¥—É, –Ω–∞–ø–∏—à–∏ /dailyweather\n"
        "–î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–∞–ø–∏—à–∏ /testweather"
    )


async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        city = " ".join(context.args)
        forecast = get_weather_forecast(city)
        if forecast:
            user_id = str(update.effective_user.id)
            user_cities[user_id] = city
            save_user_cities(user_cities)
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}\n\n{forecast}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /setcity –ú–æ—Å–∫–≤–∞")


async def send_daily_weather(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    user_id = str(job_data["user_id"])
    city = user_cities.get(user_id)

    if city:
        forecast = get_weather_forecast(city)
        if forecast:
            await context.bot.send_message(chat_id=int(user_id), text=f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{forecast}")
        else:
            await context.bot.send_message(chat_id=int(user_id), text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
    else:
        await context.bot.send_message(chat_id=int(user_id), text="–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≥–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity <–≥–æ—Ä–æ–¥>.")


async def start_daily_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_id_str = str(user_id)

    if user_id_str not in user_cities:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setcity")
        return

    current_jobs = context.job_queue.get_jobs_by_name(user_id_str)
    for job in current_jobs:
        job.schedule_removal()

    context.job_queue.run_daily(
        send_daily_weather,
        time=time(hour=8, minute=0),
        chat_id=user_id,
        name=user_id_str,
        data={"user_id": user_id}
    )

    await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ 8:00 —É—Ç—Ä–∞!")


async def test_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    city = user_cities.get(user_id)
    if city:
        forecast = get_weather_forecast(city)
        if forecast:
            await update.message.reply_text(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}:\n\n{forecast}")
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≥–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity <–≥–æ—Ä–æ–¥>.")


def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setcity", set_city))
    app.add_handler(CommandHandler("dailyweather", start_daily_weather))
    app.add_handler(CommandHandler("testweather", test_weather))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == '__main__':
    main()
