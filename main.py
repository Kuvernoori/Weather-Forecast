import os
import requests
from zoneinfo import ZoneInfo
from datetime import time, datetime

from dotenv import load_dotenv

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, Defaults
)

from storage import load_user_cities, save_user_cities
from subscription_storage import load_subscriptions, save_subscriptions

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENWEATHER_TOKEN = os.getenv("OPENWEATHER_TOKEN")

almaty_tz = ZoneInfo("Asia/Almaty")
defaults = Defaults(tzinfo=almaty_tz)

user_cities = load_user_cities()
subscriptions = load_subscriptions()

last_sent = {}
def get_weather_forecast(city):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code != 200:
        return None

    data = response.json()
    forecast_list = data.get("list", [])
    today = datetime.now(almaty_tz).date()

    result = [f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {city.title()}:\n"]
    has_data = False

    for item in forecast_list:
        forecast_time = datetime.fromtimestamp(item["dt"], tz=almaty_tz)
        if forecast_time.date() != today:
            continue

        temp = item["main"]["temp"]
        weather_desc = item["weather"][0]["description"]
        pop = item.get("pop", 0) * 100
        clouds = item["clouds"]["all"]
        wind = item["wind"]["speed"]
        time_str = forecast_time.strftime("%H:%M")

        line = f"üïí {time_str} | üå° {temp:.0f}¬∞C | {weather_desc.capitalize()}"
        if pop >= 20:
            line += f" | üåß –û—Å–∞–¥–∫–∏: {pop:.0f}%"
        if clouds >= 70:
            line += f" | ‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%"
        if wind >= 5:
            line += f" | üí® –í–µ—Ç–µ—Ä: {wind:.0f} –º/—Å"

        result.append(line)
        has_data = True

    if not has_data:
        result.append("–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ—â—ë –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")

    return "\n".join(result)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–≤–æ–π –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É:\n"
        "/setcity <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø–æ–≥–æ–¥—É, –Ω–∞–ø–∏—à–∏ /dailyweather\n"
    )
    if update.message:
        await update.message.reply_text(text)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)


async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        city = " ".join(context.args)
        forecast = get_weather_forecast(city)
        if forecast:
            user_id = str(update.effective_user.id)
            user_cities[user_id] = city
            save_user_cities(user_cities)
            text = f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}\n\n{forecast}"
        else:
            text = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    else:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /setcity –ú–æ—Å–∫–≤–∞"

    if update.message:
        await update.message.reply_text(text)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)


async def send_daily_weather_check(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(almaty_tz)
    user_id = context.job.data["user_id"]


    if last_sent.get(user_id) == now.date():
        return

    print(f"[send_daily_weather_check] –ó–∞–ø—É—Å–∫ –≤ {now.time()}")
    if time(8, 0) <= now.time() <= time(8, 30):
        city = user_cities.get(user_id)
        if city:
            forecast = get_weather_forecast(city)
            if forecast:
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text=f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{forecast}"
                )
            else:
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}."
                )
        else:
            await context.bot.send_message(
                chat_id=int(user_id),
                text="–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≥–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity <–≥–æ—Ä–æ–¥>."
            )

        last_sent[user_id] = now.date()

async def start_daily_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_id_str = str(user_id)

    if user_id_str not in user_cities:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setcity")
        return

    current_jobs = context.job_queue.get_jobs_by_name(user_id_str)
    for job in current_jobs:
        job.schedule_removal()

    context.job_queue.run_repeating(
        send_daily_weather_check,
        interval=60,
        first=1,
        data={"user_id": user_id_str},
        name=user_id_str,
    )
    print(f"[start_daily_weather] –ó–∞–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
    await update.message.reply_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")


async def test_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    job_context = {"user_id": str(update.effective_user.id)}
    context.job = type("obj", (object,), {"data": job_context})
    await send_daily_weather_check(context)


def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).defaults(defaults).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setcity", set_city))
    app.add_handler(CommandHandler("dailyweather", start_daily_weather))
    app.add_handler(CommandHandler("testweather", test_weather))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()
